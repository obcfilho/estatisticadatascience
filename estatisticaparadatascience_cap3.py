# -*- coding: utf-8 -*-
"""EstatisticaParaDataScience-Cap3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lif1AXuxDeFQogfFVaPeP2lMrjhcZjw-

# Capítulo 3 - Estatística Descritiva: Medidas de Tendência Central e de Dispersão
"""

# Commented out IPython magic to ensure Python compatibility.
# Habilita a execução de R no Google Colab
# %load_ext rpy2.ipython

"""## Média aritmética"""

# Import da função
from statistics import mean
# Dados
dados = [1,2,5,3,4]
# Calculando a média aritmética
mean(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(1,2,5,3,4)
# # Calculando a média aritmética
# mean(dados)

"""## Média geométrica"""

# Import da função
from scipy.stats.mstats import gmean
# Dados
dados = [1,2,5,3,4]
# Calculando a média geométrica
gmean(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(1,2,5,3,4)
# # Calculando a média geométrica
# exp(mean(log(dados)))

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Instalando a biblioteca
# install.packages("EnvStats")
# # Carregando a biblioteca
# library(EnvStats)
# # Calculando a média geométrica
# geoMean(dados)

"""## Média Harmônica"""

# Import da função
from statistics import harmonic_mean
# Dados
dados = [1,2,5,3,4]
# Calculando a média harmônica
harmonic_mean(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(1,2,5,3,4)
# # Calculando a média harmônica
# 1/mean(1/dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Instalando a biblioteca
# install.packages("psych")
# # Carregando a biblioteca
# library(psych)
# # Calculando a média Harmônica
# harmonic.mean(dados)

"""## Mediana"""

# Import da função
from statistics import median
# Dados
dados = [7,1,5,2,3,1,6]
# Calculando a mediana
median(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(7,1,5,2,3,1,6)
# # Calculando a mediana
# median(dados)

# Import da função
from statistics import median
# Dados
dados = [1,2,1,1,4,5,3,6]
# Calculando a mediana
median(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(1,2,1,1,4,5,3,6)
# # Calculando a mediana
# median(dados)

"""## Moda"""

# Import da função
from statistics import mode
# Dados
dados = [4,5,4,6,5,8,4]
# Calculando a moda
mode(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados=c(4,5,4,6,5,8,4)
# # Instalando a biblioteca
# install.packages("DescTools")
# # Carregando a biblioteca
# library(DescTools)
# # Calculando a moda
# Mode(dados)

# Import da função
from statistics import multimode # Python >= 3.8
# Dados
dados = [4,5,4,6,5,8,4,4,5,5]
# Calculando a moda
multimode(dados)

# Se sua versão do Python for < 3.8, use o código a seguir:

# Imports das funções
from collections import Counter
from itertools import groupby
# Dados
dados = [4,5,4,6,5,8,4,4,5,5]
# Agrupando por frequência
freqs = groupby(Counter(dados).most_common(), lambda x:x[1])
# Imprimindo os grupos de maior frequência
print([val for val,count in next(freqs)[1]])

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(4,5,4,6,5,8,4,4,5,5)
# # Instalando a biblioteca
# #install.packages("DescTools")
# # Carregando a biblioteca
# library(DescTools)
# # Calculando a moda
# Mode(dados)

# Import da função
from statistics import multimode # Python >= 3.8
# Dados
dados = [1,2,3,4,5]
# Calculando a moda
multimode(dados)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados=c(1,2,3,4,5)
# # Instalando a biblioteca
# #install.packages("DescTools")
# # Carregando a biblioteca
# library(DescTools)
# # Calculando a moda
# Mode(dados)

"""## Medidas Separatrizes"""

# Import da função
from statistics import median
import numpy as np
# Dados
dados = [3,1,5,2,3,1,7]
# Mediana
print(median(dados))
print(np.quantile(dados, 0.25))
print(np.quantile(dados, 0.75))

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(3,1,5,2,3,1,7)
# # Mediana
# print(median(dados))
# # Primeiro quartil
# print(quantile(dados,.25))
# # Terceiro quartil
# print(quantile(dados,.75))
# # Achando o Primeiro quartil (Q1), Segundo quartil(Q2) e Terceiro Quartil (Q3) de uma vez.
# print(summary(dados))

"""## Medidas de Assimetria"""

from scipy.stats import skew
skew([2, 8, 0, 4, 1, 9, 9, 0])

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(2, 8, 0, 4, 1, 9, 9, 0)
# library(e1071)
# skewness(dados)

"""## Boxplot"""

# Imports das bibliotecas
import seaborn as sns
import matplotlib.pyplot as plt

# Carregando o dataset
dados = sns.load_dataset('iris')
# Plotando um boxplot por species da característica petal length
sns.boxplot(x=dados["species"], y=dados["petal_length"])
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Carregando a biblioteca
# library(ggplot2)
# # Carregando o dataset nativo Iris
# dados = iris
# # Plotando um boxplot por Species da característica Petal.Length
# ggplot(dados, aes(x=Species, y=Petal.Length, fill=Species)) + 
#   geom_boxplot()

"""## Medidas de Dispersão"""

# Imports das bibliotecas
from statistics import variance
from statistics import stdev
from statistics import mean
import numpy as np
# Dados
dados = [3,4,5,6,12]
# Amplitude
print(np.max(dados)-np.min(dados))
# Variância
print(variance(dados))
# Desvio padrão
print(stdev(dados))
# Coeficiente de variação
print(stdev(dados)/mean(dados)*100)

# Commented out IPython magic to ensure Python compatibility.
# %%R
# # Dados
# dados = c(3,4,5,6,12)
# # Amplitude
# print(diff(range(dados)))
# # Variância
# print(var(dados))
# # Desvio padrão
# print(sd(dados))
# # Coeficiente de variação
# print(sd(dados)/mean(dados)*100)